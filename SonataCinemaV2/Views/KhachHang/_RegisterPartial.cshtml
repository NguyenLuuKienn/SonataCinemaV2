@model SonataCinemaV2.ViewModel.Register

<div class="registration-container">
    <div class="registration-card">
        <div class="registration-header text-center">
            <h2 style="color:#000">Đăng Ký Tài Khoản</h2>
        </div>
        <div class="registration-body">
            @using (Html.BeginForm("DangKy", "KhachHang", FormMethod.Post, new { @id = "registerForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-row">
                    <div class="form-group-custom">
                        <label for="TenKhachHang" class="control-label-custom">Họ và Tên</label>
                        <input type="text" name="TenKhachHang" class="form-control-custom" placeholder="Nhập họ và tên" value="@Model.TenKhachHang" />
                        @Html.ValidationMessageFor(model => model.TenKhachHang, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group-custom">
                        <label for="Email" class="control-label-custom">Email</label>
                        <input type="email" name="Email" class="form-control-custom" placeholder="Nhập email" value="@Model.Email" />
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group-custom">
                        <label for="SoDienThoai" class="control-label-custom">Số Điện Thoại</label>
                        <input type="tel" class="form-control" id="soDienThoai" name="SoDienThoai" pattern="[0-9]*" inputmode="numeric" maxlength="10"
                               oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                               onkeypress="return event.charCode >= 48 && event.charCode <= 57"
                               value="@Model.SoDienThoai"
                               required>
                        @Html.ValidationMessageFor(model => model.SoDienThoai, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group-custom">
                        <label for="NgaySinh" class="control-label-custom">Ngày Sinh</label>
                        <div class="date-picker-wrapper">
                            <input type="text"
                                   class="form-control-custom date-picker"
                                   id="ngaySinh"
                                   name="NgaySinh"
                                   placeholder="dd/mm/yyyy"
                                   autocomplete="off">
                        </div>
                        @Html.ValidationMessageFor(model => model.NgaySinh, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group-custom">
                        <label for="MatKhau" class="control-label-custom">Mật Khẩu</label>
                        <input type="password" name="MatKhau" class="form-control-custom" placeholder="Nhập mật khẩu" />
                        @Html.ValidationMessageFor(model => model.MatKhau, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group-custom">
                        <label for="NhapLaiMatKhau" class="control-label-custom">Nhập Lại Mật Khẩu</label>
                        <input type="password" name="NhapLaiMatKhau" class="form-control-custom" placeholder="Nhập lại mật khẩu" />
                        @Html.ValidationMessageFor(model => model.NhapLaiMatKhau, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group-custom gender-group">
                        <label class="control-label-custom">Giới Tính</label>
                        <div class="gender-options">
                            <label class="gender-label">
                                <input type="radio" name="GioiTinh" value="Nam" @(Model.GioiTinh == "Nam" ? "checked" : "") /> Nam
                            </label>
                            <label class="gender-label">
                                <input type="radio" name="GioiTinh" value="Nữ" @(Model.GioiTinh == "Nữ" ? "checked" : "") /> Nữ
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.GioiTinh, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group-custom captcha-group">
                        <div class="g-recaptcha" data-sitekey="6LeLSrIqAAAAAKNmfVxPljwFG2V94hTppQEy_bmL"></div>
                        @Html.ValidationMessage("ReCaptcha", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-custom text-center">
                    <button type="submit" class="btn-custom">Hoàn Thành</button>
                </div>
            }
        </div>
    </div>
</div>
<style>
    /* Registration Form Styles */
.registration-container {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
}

.registration-card {
    width: 100%;
    max-width: 1200px;
    background: #fff;
    border-radius: 15px;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
    padding: 30px;
}

.registration-header {
    margin-bottom: 30px;
}

.registration-header h2 {
    color: #333;
    font-size: 24px;
    font-weight: 600;
}

.form-row {
    display: flex;
    justify-content: space-between;
    gap: 20px;
    margin-bottom: 20px;
}

.form-group-custom {
    flex: 1;
    min-width: 200px;
}

.control-label-custom {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #333;
}

.form-control-custom {
    width: 100%;
    padding: 10px 15px;
    border: 2px solid #eee;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.3s ease;
}

.form-control-custom:focus {
    border-color: #df9a2c;
    box-shadow: 0 0 0 2px rgba(223, 154, 44, 0.1);
    outline: none;
}

.gender-group {
    flex: 0.5;
}

.gender-options {
    display: flex;
    gap: 20px;
    margin-top: 5px;
}

.gender-label {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
}

.captcha-group {
    flex: 1.5;
}

.text-danger {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    display: block;
}

.btn-custom {
    background: #df9a2c;
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 20px;
}

.btn-custom:hover {
    background: #c88a25;
    transform: translateY(-2px);
}
    .date-picker-wrapper {
        position: relative;
    }

    .date-picker-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #df9a2c;
        pointer-events: none;
    }

    .flatpickr-calendar {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
        font-family: inherit;
        padding: 10px;
        width: 325px !important;
    }

    .flatpickr-months {
        background: #ffffff;
        border-bottom: 1px solid #e0e0e0;
        padding: 10px 0;
    }

    .flatpickr-current-month {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        padding: 0;
    }

    .flatpickr-monthDropdown-months,
    .numInput.cur-year {
        background: #f8f9fa;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 2px 8px;
        font-size: 14px;
        color: #333;
        font-weight: 500;
    }

    .flatpickr-weekdays {
        margin: 10px 0;
    }

    .flatpickr-weekday {
        color: #df9a2c;
        font-weight: 600;
        font-size: 13px;
    }

    .flatpickr-day {
        border-radius: 4px;
        margin: 2px;
        height: 36px;
        line-height: 36px;
        color: #333;
        font-weight: 400;
    }

        .flatpickr-day.selected {
            background: #df9a2c;
            border-color: #df9a2c;
            color: white;
        }

        .flatpickr-day:hover {
            background: #fff3e3;
            border-color: transparent;
        }

        .flatpickr-day.today {
            border-color: #df9a2c;
        }

    .flatpickr-months .flatpickr-prev-month,
    .flatpickr-months .flatpickr-next-month {
        padding: 5px;
        fill: #666;
    }

        .flatpickr-months .flatpickr-prev-month:hover,
        .flatpickr-months .flatpickr-next-month:hover {
            fill: #df9a2c;
        }

    .date-picker-wrapper {
        position: relative;
    }

    .date-picker-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #df9a2c;
        pointer-events: none;
    }

    .form-control-custom.date-picker {
        padding-right: 35px;
        cursor: pointer;
    }

        .form-control-custom.date-picker:hover {
            border-color: #df9a2c;
            background-color: #fff9f0;
        }
</style>
<script>
   document.addEventListener('DOMContentLoaded', function() {
    flatpickr("#ngaySinh", {
        locale: {
            firstDayOfWeek: 1,
            weekdays: {
                shorthand: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
                longhand: ['Chủ Nhật', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'],
            },
            months: {
                shorthand: ['Th1', 'Th2', 'Th3', 'Th4', 'Th5', 'Th6', 'Th7', 'Th8', 'Th9', 'Th10', 'Th11', 'Th12'],
                longhand: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            },
        },
        dateFormat: "d/m/Y",
        maxDate: new Date(),
        minDate: "1920-01-01",
        defaultDate: "@(Model.NgaySinh != DateTime.MinValue ? Model.NgaySinh.ToString("yyyy-MM-dd") : "")",
        disableMobile: false,
        static: true,
        monthSelectorType: "dropdown",
        yearSelectorType: "dropdown",
        showMonths: 1,
        time_24hr: true,
        parseDate: (datestr, format) => {
            return moment(datestr, 'DD/MM/YYYY').toDate();
        },
        formatDate: (date, format, locale) => {
            return moment(date).format('DD/MM/YYYY');
        }
    });
});
</script>
